#ifndef VERSION_H_IN
#define VERSION_H_IN

#include <QDateTime>
#include <QGuiApplication>
#include <QScreen>
#include <QString>
#include <QSysInfo>

namespace across {
inline const QString GUI_VERSION() { return QStringLiteral("@GUI_VERSION@"); }

inline const QString BUILD_INFO() { return QStringLiteral("@BUILD_INFO@"); }

inline const QString BUILD_TIME() {
    return QDateTime::currentDateTimeUtc().toString();
}

inline const QString EXTRA_INFO() {
    QScreen *screen = QGuiApplication::screens().at(0);

    QString info =
        QStringLiteral(
            "OS: %1 | Kernel: %2 | Platform: %3 | Screen: %4x%5 | DPI: %6")
            .arg(QSysInfo::productType())
            .arg(QSysInfo::kernelVersion())
            .arg(QGuiApplication::platformName())
            .arg(screen->size().rwidth())
            .arg(screen->size().rheight())
            .arg(screen->logicalDotsPerInch());

    return info;
}

inline const QString SOURCE_CODE_URL() {
    return QStringLiteral("https://github.com/ArkToria/ACross");
}

inline const QString ISSUES_URL() {
    return QStringLiteral("https://github.com/ArkToria/ACross/issues");
}

inline const QString LICENSE_URL() {
    return QStringLiteral("https://www.gnu.org/licenses/gpl-3.0.html");
}

inline const QString API_URL(uint per_page = 0) {
    if (per_page == 0) {
        return QStringLiteral(
            "https://api.github.com/repos/ArkToria/ACross/releases/latest");
    } else {
        return QStringLiteral("https://api.github.com/repos/ArkToria/ACross/"
                              "releases?per_page=%1")
            .arg(per_page);
    }
}

inline const QString RELEASE_URL() {
    return QStringLiteral("https://github.com/ArkToria/ACross/releases");
}

inline const QStringList FONT_LIST() {
    const static QStringList default_fonts = {
        "Noto Sans",     "Segoe UI Variable", "Segoe UI",
        "Noto Sans CJK", "PingFang SC",       "Microsoft YaHei UI",
    };

    auto fonts_fallback = QStringLiteral("@FONTS_FALLBACK@");
    do {
        if (fonts_fallback.isEmpty())
            break;

        QStringList temp_fonts;
        for (auto &font : fonts_fallback.split(",")) {
            temp_fonts.append(font.trimmed());
        }

        if (temp_fonts.isEmpty())
            break;

        return temp_fonts;
    } while (false);

    return default_fonts;
}

inline const QString DATE_TIME_FORMAT() {
    auto format_string = QStringLiteral("@DATE_TIME_FORMAT@");

    if (format_string.isEmpty())
        format_string = QString("MM/dd/yyyy hh:mm:ss");

    return format_string;
}
} // namespace across

#endif // VERSION_H_IN
