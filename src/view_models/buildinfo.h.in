#ifndef VERSION_H_IN
#define VERSION_H_IN

#include <QDateTime>
#include <QGuiApplication>
#include <QScreen>
#include <QString>
#include <QSysInfo>
#include <fmt/format.h>

namespace across {
    inline static const QString getVersion() {
        QString version("@GUI_VERSION@");

        return version;
    }

    inline static const QString getBuildInfo() {
        QString buildInfo("@BUILD_INFO@");
        return buildInfo;
    }

    inline static const QString
    getExtraInfo()
    {
      QSysInfo sys_info;
      QScreen* screen = QGuiApplication::screens().at(0);

      std::string info = fmt::format(
        "OS: {} | Kernel: {} | Platform: {} | Screen: {}x{} | DPI: {}",
        sys_info.productType().toStdString(),
        sys_info.kernelVersion().toStdString(),
        QGuiApplication::platformName().toStdString(),
        screen->size().rwidth(),
        screen->size().rheight(),
        screen->logicalDotsPerInch());

      return QString().fromStdString(info);
    }

    inline static const QString getBuildTime() {
        QDateTime time = QDateTime::currentDateTimeUtc();
        return time.toString();
    }

    inline static const QString
    getSourceCodeURL()
    {
      return QString("https://github.com/ArkToria/ACross");
    }

    inline static const QString
    getReportURL()
    {
      return QString("https://github.com/ArkToria/ACross/issues");
    }

    inline static const QString
    getLicenseURL()
    {
      return QString("https://www.gnu.org/licenses/gpl-3.0.html");
    }
}

#endif // VERSION_H_IN
